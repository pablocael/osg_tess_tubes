#version 400
layout(quads, equal_spacing, ccw) in;
in vec3 tcPosition[];
in vec3 tcNormal[];
in vec3 tcBinormal[];
in float tcDistanceTo0[];

out vec3 tePosition;
out vec3 teNormal;
out float teDistanceTo0;

uniform mat4 osg_ModelViewMatrix;
uniform float radius;
 
void main()
{
	float u = gl_TessCoord.x, v = gl_TessCoord.y;
	float tau = 6.283185307179586; // tau = 2 * pi
	float radius = radius;
	float theta = u * tau;
    
	int vertexIndex = int( mix( 0, 31, v ) );

	vec3 Pc = tcPosition[vertexIndex];
	vec3 Nc = tcNormal[vertexIndex];
	vec3 Bc = tcBinormal[vertexIndex];
		
    vec3 C = vec3( radius * sin(theta), radius * cos(theta), 0.0 );
    
    vec3 finalPos = vec3( Pc.x + C.x * Nc.x + C.y * Bc.x, Pc.y + C.x * Nc.y + C.y * Bc.y, Pc.z + C.x * Nc.z + C.y * Bc.z + radius );

    teNormal = normalize(finalPos - Pc);
	tePosition = finalPos;
	teDistanceTo0 = tcDistanceTo0[vertexIndex];
	gl_Position =  osg_ModelViewMatrix * vec4(finalPos, 1);
}